---
import Icon from "../Icon.astro";

interface Props {
  name: "light" | "system" | "dark";
}

const { name } = Astro.props;

function getIcon() {
  switch (name) {
    case "light":
      return "sun";
    case "system":
      return "desktop";
    case "dark":
      return "moon-stars";
  }
}
---

<theme-button
  name={`theme-toggle-${name}`}
  data-mode={name}
  data-checked="false"
  class="group rounded-full p-1 z-10 data-[checked=true]:bg-accent-neutral focus-within:bg-background focus-within:ring-2 focus-within:ring-accent-neutral focus-within:ring-offset-2 focus-within:ring-offset-accent-light hover:bg-accent-neutral transition-colors duration-200 ease-[--ease-3]"
>
  <label>
    <input
      type="radio"
      class="sr-only peer"
      name="theme-toggle"
      data-checked="false"
      data-mode={name}
    />
    <Icon
      icon={getIcon()}
      size="1.25rem"
      className="icon peer-checked:text-[var(--background)] text-accent-light"
    />
  </label>
</theme-button>

<style>
  .icon {
    z-index: 1;
    position: relative;
    display: flex;
    color: var(--accent-dark);
  }
</style>
<script>
  import { themeState } from "./themeState";
  class ThemeButton extends HTMLElement {
    constructor() {
      super();

      const input = this.querySelector("input")!;
      const mode = this.dataset.mode!;

      input.addEventListener("click", () => {
        this.setMode(mode);
      });

      themeState.subscribe((mode) => {
        this.setChecked({ checked: mode === this.dataset.mode, mode });
      });
    }

    setMode(mode: string) {
      themeState.set(mode);
      if (localStorage) {
        localStorage.setItem("theme", mode);
      }
    }

    setChecked({
      checked,
      mode,
    }: {
      checked: boolean;
      mode: string; // "light" | "system" | "dark"
    }) {
      const input = this.querySelector("input")!;
      input.dataset.checked = checked.toString();
      this.dataset.checked = checked.toString();
      input.checked = checked;
      this.setMode(mode);

      document.documentElement.classList.remove("light", "system", "dark");
      document.documentElement.classList.add(mode);
      document.documentElement.dataset.theme = mode;
      if (mode === "system") {
        const isDark = window.matchMedia(
          "(prefers-color-scheme: dark)",
        ).matches;
        document.documentElement.classList.add(isDark ? "dark" : "light");
      }
    }
  }

  customElements.define("theme-button", ThemeButton);
</script>
