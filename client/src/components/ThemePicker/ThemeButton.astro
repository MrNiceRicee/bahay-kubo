---
import Icon from "../Icon.astro";

interface Props {
  name: "light" | "system" | "dark";
}

const { name } = Astro.props;

function getIcon() {
  switch (name) {
    case "light":
      return "sun";
    case "system":
      return "desktop";
    case "dark":
      return "moon-stars";
  }
}
---

<theme-button
  name={`theme-toggle-${name}`}
  data-mode={name}
  data-checked="false"
  class="group"
>
  <label>
    <input
      type="radio"
      class="sr-only peer"
      name="theme-toggle"
      data-checked="false"
    />

    <Icon icon={getIcon()} className="icon peer-checked:text-accent-neutral" />
  </label>
</theme-button>

<style>
  .icon {
    z-index: 1;
    position: relative;
    display: flex;
    color: var(--accent-dark);
  }
</style>
<script>
  class ThemeButton extends HTMLElement {
    constructor() {
      super();

      const input = this.querySelector("input")!;
      const mode = this.dataset.mode!;

      input.addEventListener("click", () => {
        const checked = input.checked;
        this.setChecked({ checked, mode });
      });

      if (this.getCurrentMode() === mode) {
        this.setChecked({ checked: true, mode });
      }
    }

    // get the document's current theme
    setChecked({
      checked,
      mode,
    }: {
      checked: boolean;
      mode: string; // "light" | "system" | "dark"
    }) {
      const input = this.querySelector("input")!;
      input.dataset.checked = checked.toString();
      this.dataset.checked = checked.toString();
      input.checked = checked;
      this.setMode(mode);

      document.documentElement.classList.remove("light", "system", "dark");
      document.documentElement.classList.add(mode);
      document.documentElement.dataset.theme = mode;
      if (mode === "system") {
        const isDark = window.matchMedia(
          "(prefers-color-scheme: dark)",
        ).matches;
        document.documentElement.classList.add(isDark ? "dark" : "light");
      }
    }

    getCurrentMode() {
      if (
        typeof localStorage !== "undefined" &&
        localStorage.getItem("theme")
      ) {
        return localStorage.getItem("theme");
      }
      // initial state is system
      return "system";
    }

    setMode(mode: string) {
      if (typeof localStorage !== "undefined") {
        localStorage.setItem("theme", mode);
      }
    }
  }

  customElements.define("theme-button", ThemeButton);
</script>
